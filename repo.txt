==== File: ./utilities/src/export_csv.py ====

def export_to_csv(input_dir, output_dir):
    # Ensure output directory exists
    os.makedirs(output_dir, exist_ok=True)

    # Process each JSON file in topics
    for root, dirs, files in os.walk(input_dir):
        for file in files:
            if file.endswith(".json"):
                relative_path = os.path.relpath(root, input_dir)  # e.g., linux/
                deck_name = safe_deck_name(relative_path)         # Avoid underscore conflicts
                tag_name = os.path.splitext(file)[0]              # File name → tag

                deck_output_dir = os.path.join(output_dir, deck_name)
                os.makedirs(deck_output_dir, exist_ok=True)

                output_file = os.path.join(deck_output_dir, f"{tag_name}.csv")

                with open(output_file, 'w', newline='') as csvfile:
                    writer = csv.writer(csvfile)
                    writer.writerow(["ID", "Front", "Back", "Tags"])  # Write headers

                    with open(os.path.join(root, file), 'r') as f:
                        data = json.load(f)
                        cards = data.get('cards', [])
                        for card in cards:
                            card_id = f"{deck_name}-{tag_name}-{card['id']}"
                            tags = ";".join(data.get('tags', [])) + f";{tag_name}"

                            if card['type'] == 'multiple-choice':
                                # Generate the Front
                                choices = card.get('choices', [])
                                front = card['question'] + "\n\n"
                                front += "\n".join([f"{idx+1}. {choice['text']}" for idx, choice in enumerate(choices)])
                                front += "\n\nPlease give the number(s) of the correct answer(s), separated by spaces."

                                # Generate the Back
                                correct_answers = [str(idx+1) for idx, choice in enumerate(choices) if choice['correct']]
                                if correct_answers:
                                    back = f"Correct Answer(s): {' '.join(correct_answers)}\n\n"
                                    back += "Explanations:\n"
                                    for idx, choice in enumerate(choices):
                                        explanation = choice.get('explanation', "No explanation provided.")
                                        back += f"{idx+1}. {choice['text']}: {explanation}\n"
                                else:
                                    back = "This was a trick question - there was no correct answer."

                            else:
                                # Handle other card types
                                front = card.get('question', "N/A")
                                back = card.get('answer', "N/A")

                            writer.writerow([card_id, front, back, tags])

                print(f"Exported deck: {deck_name}/{tag_name} → {output_file}")


==== File: ./data/linux/networking.csv ====

ID,Front,Back,Tags
linux-networking-linux-net_devices-ip_command,What command is used to display network devices and their states?,ip link,linux;networking;networking
linux-networking-linux-rename-net_device,"To rename a network device, use the {{c1::ip link set}} command.",N/A,linux;networking;networking
linux-networking-linux-static-ip-setup,What command sets a static IP address for a device?,ip addr add,linux;networking;networking
linux-networking-linux-net_devices-static_route,Which command adds a static route to a network?,ip route add (✔); ip addr add (✘); ip link set (✘),linux;networking;networking

