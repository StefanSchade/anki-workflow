diff --git a/utilities/src/export_csv.py b/utilities/src/export_csv.py
index 9b99be7..95d5c35 100644
--- a/utilities/src/export_csv.py
+++ b/utilities/src/export_csv.py
@@ -1,11 +1,3 @@
-import json
-import csv
-import os
-
-def safe_deck_name(path):
-    """Replaces only slashes with underscores while preserving existing underscores."""
-    return path.replace("/", "__")  # Double underscore to avoid conflicts
-
 def export_to_csv(input_dir, output_dir):
     # Ensure output directory exists
     os.makedirs(output_dir, exist_ok=True)
@@ -14,48 +6,50 @@ def export_to_csv(input_dir, output_dir):
     for root, dirs, files in os.walk(input_dir):
         for file in files:
             if file.endswith(".json"):
-                # Derive deck and tag names
                 relative_path = os.path.relpath(root, input_dir)  # e.g., linux/
                 deck_name = safe_deck_name(relative_path)         # Avoid underscore conflicts
                 tag_name = os.path.splitext(file)[0]              # File name → tag
 
-                # Prepare output directory for deck
                 deck_output_dir = os.path.join(output_dir, deck_name)
                 os.makedirs(deck_output_dir, exist_ok=True)
 
-                # Prepare output CSV for the deck
                 output_file = os.path.join(deck_output_dir, f"{tag_name}.csv")
 
-                with open(output_file, 'w', newline='') as csvfile:  # Overwrite mode for a clean start
+                with open(output_file, 'w', newline='') as csvfile:
                     writer = csv.writer(csvfile)
                     writer.writerow(["ID", "Front", "Back", "Tags"])  # Write headers
 
-                    # Load JSON data
                     with open(os.path.join(root, file), 'r') as f:
                         data = json.load(f)
-                        cards = data.get('cards', [])  # Support multiple cards
+                        cards = data.get('cards', [])
                         for card in cards:
-                            # Construct full ID
                             card_id = f"{deck_name}-{tag_name}-{card['id']}"
+                            tags = ";".join(data.get('tags', [])) + f";{tag_name}"
 
-                            # Determine 'Back' (answer or placeholder for multiple-choice)
                             if card['type'] == 'multiple-choice':
-                                back = "; ".join([f"{choice['text']} ({'✔' if choice['correct'] else '✘'})" for choice in card.get('choices', [])])
+                                # Generate the Front
+                                choices = card.get('choices', [])
+                                front = card['question'] + "\n\n"
+                                front += "\n".join([f"{idx+1}. {choice['text']}" for idx, choice in enumerate(choices)])
+                                front += "\n\nPlease give the number(s) of the correct answer(s), separated by spaces."
+
+                                # Generate the Back
+                                correct_answers = [str(idx+1) for idx, choice in enumerate(choices) if choice['correct']]
+                                if correct_answers:
+                                    back = f"Correct Answer(s): {' '.join(correct_answers)}\n\n"
+                                    back += "Explanations:\n"
+                                    for idx, choice in enumerate(choices):
+                                        explanation = choice.get('explanation', "No explanation provided.")
+                                        back += f"{idx+1}. {choice['text']}: {explanation}\n"
+                                else:
+                                    back = "This was a trick question - there was no correct answer."
+
                             else:
+                                # Handle other card types
+                                front = card.get('question', "N/A")
                                 back = card.get('answer', "N/A")
 
-                            # Combine tags
-                            tags = ";".join(data.get('tags', [])) + f";{tag_name}"
-
-                            # Write to CSV
-                            writer.writerow([card_id, card['question'], back, tags])
+                            writer.writerow([card_id, front, back, tags])
 
                 print(f"Exported deck: {deck_name}/{tag_name} → {output_file}")
 
-if __name__ == "__main__":
-    # Define default paths for input and output
-    input_dir = "./topics"
-    output_dir = "./data"
-    
-    export_to_csv(input_dir, output_dir)
-
diff --git a/utilities/templates/basic.json b/utilities/templates/basic.json
deleted file mode 100644
index fac9025..0000000
--- a/utilities/templates/basic.json
+++ /dev/null
@@ -1,11 +0,0 @@
-{
-  "type": "basic",
-  "fields": [
-    {
-      "question": "What is the command to list block devices?",
-      "answer": "lsblk"
-    }
-  ],
-  "tags": ["linux", "commands"]
-}
-
diff --git a/utilities/templates/flashcard_schema.json b/utilities/templates/flashcard_schema.json
index 84ca0ce..97a7877 100644
--- a/utilities/templates/flashcard_schema.json
+++ b/utilities/templates/flashcard_schema.json
@@ -1,69 +1,26 @@
 {
-  "$schema": "http://json-schema.org/draft-07/schema#",
-  "title": "Flashcard Schema",
-  "description": "Schema for validating flashcard JSON files for multiple card types.",
   "type": "object",
   "properties": {
-    "cards": {
+    "id": { "type": "string" },
+    "type": { "enum": ["multiple-choice"] },
+    "question": { "type": "string" },
+    "choices": {
       "type": "array",
-      "description": "Array of cards for this file.",
       "items": {
         "type": "object",
         "properties": {
-          "id": {
-            "type": "string",
-            "description": "Unique identifier for the card."
-          },
-          "type": {
-            "type": "string",
-            "enum": ["basic", "cloze", "typing", "multiple-choice"],
-            "description": "Type of the flashcard."
-          },
-          "question": {
-            "type": "string",
-            "description": "Question or prompt for the card."
-          },
-          "answer": {
-            "type": "string",
-            "description": "Answer for the card (used for basic, typing, or cloze types)."
-          },
-          "choices": {
-            "type": "array",
-            "description": "List of choices for multiple-choice questions.",
-            "items": {
-              "type": "object",
-              "properties": {
-                "text": {
-                  "type": "string",
-                  "description": "Text of the choice."
-                },
-                "correct": {
-                  "type": "boolean",
-                  "description": "Specifies whether this choice is a correct answer for the card."
-                }
-              },
-              "required": ["text", "correct"]
-            }
-          },
-          "tags": {
-            "type": "array",
-            "description": "Tags for categorizing the card.",
-            "items": {
-              "type": "string"
-            }
-          }
+          "text": { "type": "string" },
+          "correct": { "type": "boolean" },
+          "explanation": { "type": "string" }
         },
-        "required": ["id", "type", "question"]
+        "required": ["text", "correct"]
       }
     },
     "tags": {
       "type": "array",
-      "description": "Tags that apply to all cards in this file.",
-      "items": {
-        "type": "string"
-      }
+      "items": { "type": "string" }
     }
   },
-  "required": ["cards"]
+  "required": ["id", "type", "question", "choices"]
 }
 
diff --git a/utilities/templates/typing.json b/utilities/templates/typing.json
deleted file mode 100644
index 967a050..0000000
--- a/utilities/templates/typing.json
+++ /dev/null
@@ -1,11 +0,0 @@
-{
-  "type": "typing",
-  "fields": [
-    {
-      "prompt": "Name 3 commands in the util-linux package.",
-      "expected": ["fdisk", "lsblk", "mount"]
-    }
-  ],
-  "tags": ["linux", "util-linux"]
-}
-
